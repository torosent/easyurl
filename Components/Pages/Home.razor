@page "/"

@using easyurl.Data
@using Microsoft.AspNetCore.Http

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject ITableStorage tableStorage
@inject IHttpContextAccessor httpContextAccessor
@rendermode InteractiveServer

<PageTitle>Easy URL</PageTitle>

<h1>Easy URL</h1>
<div class="mb-4">
    Easy URL is a simple URL shortener. Just paste a long URL into the box below and click the "Shorten" button to get a
    short URL that you can use to share the original link.
</div>

<div class="row g-3">
    <div class="col-sm-5">
        <input class="form-control" @bind="originalUrl" placeholder="Enter URL" />
    </div>
    <div class="col-sm-2">
        <button class="btn btn-success" @onclick=ShortenUrl>Shorten
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                class="bi bi-arrow-right-circle" viewBox="0 0 16 16">
                <path fill-rule="evenodd"
                    d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8m15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0M4.5 7.5a.5.5 0 0 0 0 1h5.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5z" />
            </svg>
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(shortenedUrl))
{
    <p>Shortened URL: <a href="@shortenedUrl" target="_blank">@shortenedUrl</a></p>
}

@code {
    private string originalUrl = "";
    private string shortenedUrl = "";

    /// <summary>
    /// Shorten the URL
    /// </summary>
    private async Task ShortenUrl()
    {
        if (!string.IsNullOrEmpty(originalUrl))
        {
            Uri uriResult;
            if (Uri.TryCreate(originalUrl, UriKind.Absolute, out uriResult))
            {
                string key = GenerateKey();
                while (await tableStorage.CheckIfKeyExists(key))
                {
                    key = GenerateKey();
                }
                string baseUrl = NavigationManager.BaseUri;
                shortenedUrl = baseUrl + @"r/" + key;
                await tableStorage.SaveShortenedUrl(originalUrl, key, shortenedUrl,
                httpContextAccessor.HttpContext.Connection?.RemoteIpAddress.MapToIPv4().ToString());
            }
            else
            {
                shortenedUrl = "";
            }
        }
        await JsRuntime.InvokeVoidAsync("console.log", shortenedUrl);

    }

    /// <summary>
    /// Generate a random key for the shortened URL
    /// </summary>
    private string GenerateKey()
    {
        // Generate a random key for the shortened URL
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        char[] key = new char[6];
        Random random = new Random();
        for (int i = 0; i < key.Length; i++)
        {
            key[i] = chars[random.Next(chars.Length)];
        }
        return new string(key);
    }
}